{smcl}
{* *! version 17.0 23jun2023}{...}
{viewerjumpto "Syntax" "PanelPatch##syntax"}{...}
{viewerjumpto "Menu" "PanelPatch##menu"}{...}
{viewerjumpto "Description" "PanelPatch##description"}{...}
{viewerjumpto "Options" "PanelPatch##options"}{...}
{viewerjumpto "Return" "PanelPatch##return"}{...}
{viewerjumpto "Examples" "PanelPatch##examples"}{...}
{viewerjumpto "Dependent commands" "PanelPatch##dependent"}{...}

{p2col:{bf:PanelPatch}}Multiple Imputation and Unit Attrition Adjustment for Longitudinal Data

{marker syntax}{...}
{title:Syntax}
{phang}
{cmd:PanelPatch} {varlist} {opt [if]} {opt [in]} {cmd:,} 
{opt add(integer)} {opt i(varlist)} {opt j(varlist)} 
{opt w:ave(varlist)} {opt waver:esponseflag(varlist)} [ {it:options} ]

{p 4 4 2}where {it:varlist} contains the list of variables to be imputed. The
{cmd:*} and {cmd:?} wildcards are allowed in {it:varlist}.

{marker description}{...}
{title:Description}
{pstd}
{cmd:PanelPatch} is a Stata command designed to prepare longitudinal data involving more than two time points for analyses, such as a growth curve analysis. Abt Associates developed this command to facilitate the preparation of panel data with nonresponse prior to conducting longitudinal analyses. The {cmd: PanelPatch} command is designed with two goals in mind. The first goal is to salvage a significant proportion of the partial information from incomplete case histories. The second goal is to enable typical Stata users to achieve the first goal without the assistance of senior statistical consultants.

{pstd}
{cmd:PanelPatch} makes use of Stata's native {cmd:mi impute} procedures in addition to performing the final imputations using custom {cmd: mi impute} procedures. 


{marker options}{...}
{title:Options}

{dlgtab:Required}
{phang}{opt add(integer)} specifies the number of multiple imputations to generate. See {opt add(numlist)} in {cmd: mi impute}.

{phang}{opt i(varlist)} specifies the variable which identifies the unit of observation, unique within {opt: j}, which is repeated across {opt: wave}.

{phang}{opt j(varlist)} specifies the variable which identifies the primary sampling unique in the base wave. 

{phang}{opt w:ave(varlist)} specifies the variable which identifies waves using ordered integers.

{phang}{opt waver:esponseflag(varlist)} specifies a user created variable which is coded 1 if the unit responded to a wave, 0 otherwise.

{pstd} To perform attrition weight adjustment, the following option is required: 

{phang}{opt weightvar(varlist)} specifies the variable or variables (in the case of replicate weights) which need to be adjusted. New variables appended with _wgtadj are created. 

{dlgtab:At least one Stable Variable option is required}

{phang}{opt sn:umericvars(varlist)} specifies which variables in {varlist} are stable across waves, real numbers, but not categorical.

{phang}{opt so:rderedvars(varlist)} specifies which variables in {varlist} are stable across waves, integers, and represent ordered categories. These can include binary variables.

{phang}{opt su:norderedvars(varlist)} specifies which variables in {varlist} are stable across waves, integers, and represent unordered categories. These can include binary variables.

{dlgtab:At least one Dynamic Variable option is required}

{phang}{opt vn:umericvars(varlist)} specifies which variables in {varlist} vary across waves, real numbers, but not categorical.

{phang}{opt vo:rderedvars(varlist)} specifies which variables in {varlist} vary across waves, integers, and represent ordered categories. These can include binary variables.

{phang}{opt vu:norderedvars(varlist)} specifies which variables in {varlist} vary across waves, integers, and represent unordered categories. These can include binary variables.

{dlgtab:Not Required}

{phang}{opt x:vars(varlist)} specifies any auxiliary variables which should be used in the interim imputations. Stable variables will use the first wave's values.  

{phang}{opt diagnosticdata(string)} specifies a path and file name stub to save data containing intermidate steps in the PanelPatch process. 

{phang}{opt minwave(integer)} specifies the minimum number of waves required for the returned imputations. Default is 3. 

{phang}{opt b:urnin(integer)} specifies the number of burn-in cycles for Stata's native {cmd: mi impute chained} procedure. Default is 10.

{phang}{opt lassofolds(integer)} specifies the number of folds to be used in Stata's {cmd: lasso} command. Default is 10.

{phang}{opt rundiag:nostic} Triggers a set of diagnostic analyses to evaluate the likely quality of the imputations. Requires {opt weightvar}.

{marker return}{...}
{title:Return}
{hline}
{pstd}PanelPatch returns the following in {cmd :r()}:

{synoptset 15 tabbed}{...}
{p2col 5 15 19 2: Diagnostic Tables}{p_end}
{synopt:{cmd:r(Table 1)}}For each wave, the number of study members for whom all the repeating variables were imputed because of wave nonresponse{p_end}
{synopt:{cmd:r(Table 2)}}For each wave, the weighted mean values of binary and interval-valued repeating variables variable (with the associated cluster-corrected standard errors) before and after imputation{p_end}
{synopt:{cmd:r(Table 3)}}For each wave, the weighted frequencies of categorical repeating variables (with the associated cluster-corrected standard errors) before and after imputation{p_end}
{synopt:{cmd:r(Table 4)}}The cross-wave linear and quadratic trends in each binary and interval-valued variable (with the associated cluster-corrected standard error) before and after imputation{p_end}
{synopt:{cmd:r(Table 5)}}The gamma statistic for the association of each ordered categorical repeating variable with wave before and after imputation{p_end}
{synopt:{cmd:r(Table 6)}}The cross-wave linear trend in each level of each unordered categorical variable (with the associated cluster-corrected standard error) before and after imputation{p_end}
{synopt:{cmd:r(Table 7)}}The correlation of wave 1 with wave 5 for each interval-valued repeating variable before and after imputation{p_end}
{synopt:{cmd:r(Table 8)}}The R-squared for a linear model of each binary, ordered categorical, and interval-valued variable at wave 5 in terms of the complete set of stable variables before and after imputation{p_end}
{synopt:{cmd:r(Table 9)}}The "design effect" induced by the differential weighting{p_end}
{synopt:{cmd:r(Table 10)}}For each wave, the weighted mean values of binary and interval-valued repeating variables variable (with the associated cluster-corrected standard errors) before and after weight adjustment{p_end}
{synopt:{cmd:r(Table 11)}}For each wave, the weighted frequencies of categorical repeating variables (with the associated cluster-corrected standard errors) before and after weight adjustment{p_end}
{p2colreset}{...}


{marker dependent}{...}
{title:Dependent commands}
{hline}

{phang}
{cmd:PanelPatch}, which is programmed in the file PanelPatch.ado, utilizes several other authored commands, including {cmd: mi_impute_cmd_PanelPatch_cleanup}, {cmd: mi_impute_cmd_PanelPatch_init}, {cmd: mi_impute_cmd_PanelPatch_parse}, {cmd: mi_impute_cmd_PanelPatch}, {cmd: PanelPatch_cluster_algorithm}, {cmd: PanelPatch_cluster_checker}, {cmd: PanelPatch_cluster_collapse}, {cmd: PanelPatch_cluster_wrapper}, {cmd: PanelPatch_corr}, {cmd: PanelPatch_gamma}, {cmd: PanelPatch_mk_compvars}, {cmd: PanelPatch_poly_trend_by}, {cmd: PanelPatch_predict_wrapper}, {cmd: PanelPatch_running_response}, {cmd: PanelPatch_weight_adjust}, {cmd: PanelPatch_weight_cluster}, and {cmd: PanelPatchDiag}.

{hline}
