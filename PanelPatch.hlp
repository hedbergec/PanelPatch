{smcl}
{* *! version 17.0 23jun2023}{...}
{viewerjumpto "Syntax" "PanelPatch##syntax"}{...}
{viewerjumpto "Menu" "PanelPatch##menu"}{...}
{viewerjumpto "Description" "PanelPatch##description"}{...}
{viewerjumpto "Options" "PanelPatch##options"}{...}
{viewerjumpto "Return" "PanelPatch##return"}{...}
{viewerjumpto "Examples" "PanelPatch##examples"}{...}
{viewerjumpto "Dependent commands" "PanelPatch##dependent"}{...}

{p2col:{bf:PanelPatch}}Multiple Imputation and Unit Attrition Adjustment for Longitudinal Data

{marker syntax}{...}
{title:Syntax}
{phang}
{cmd:PanelPatch} {varlist} to be imputed {opt [if]} {opt [in]} {cmd:,} 
{opt add(integer)} {opt i(varlist)} {opt j(varlist)} 
{opt w:ave(varlist)} {opt waver:esponseflag(varlist)} 
[{opt x:vars(varlist)}] [{opt weightvar(varlist)}] 
[{opt sn:umericvars(varlist)}] [{opt vn:umericvars(varlist)}]
[{opt su:norderedvars(varlist)}]  [{opt vu:norderedvars(varlist)}] 
[{opt so:rderedvars(varlist)}] [{opt vo:rderedvars(varlist)}] 
[{opt diagnosticdata(string)}] [{opt minwave(integer)}] [{opt b:urnin(integer)}] 
[{opt lassofolds(integer)}] [{opt rundiag:nostic}] 


{marker description}{...}
{title:Description}
{pstd}
{cmd:PanelPatch} is a Stata command designed to prepare data in {varlist} from panel studies for longitudinal analyses involving more than two time points, such as growth curve analysis. Abt Associates developed this  Stata command to facilitate the preparation of panel data with nonresponse prior to conducting longitudinal analyses such as growth curve analyses. The {cmd: PanelPatch} command is designed with two goals in mind. The first goal is to salvage a significant proportion of the partial information from incomplete case histories. The second goal is to enable typical Stata users to achieve the first goal without the assistance of senior statistical consultants. 

{pstd}
{cmd:PanelPatch} makes use of Stata's native {cmd:mi impute} procedures in addition to performing the final imputations using custom {cmd: mi impute} procedures. 


{marker options}{...}
{title:Options}
{pstd} The following options are required

{phang}{opt add(integer)} specifies the number of multiple imputations to generate. See {opt add(numlist)} in {cmd: mi impute}.

{phang}{opt i(varlist)} specifies the variable which identifies the unit of observation, unique within {opt: j}, which is repeated across {opt: wave}.

{phang}{opt j(varlist)} specifies the variable which identifies the primary sampling unique in the base wave. 

{phang}{opt w:ave(varlist)} specifies the variable which identifies waves using ordered integers.

{phang}{opt waver:esponseflag(varlist)} specifies a user created variable which is coded 1 if the unit responded to a wave, 0 otherwise.

{pstd} To perform attrition weight adjustment, the following option is required 

{phang}{opt weightvar(varlist)} specifies the variable or variables (in the case of replicate weights) which need to be adjusted. New variables appended with _wgtadj are created. 

{pstd} At least one of the following options is required

{phang}{opt sn:umericvars(varlist)} specifies which variables in {varlist} are stable across waves, real numbers, but not categorical.

{phang}{opt so:rderedvars(varlist)} specifies which variables in {varlist} are stable across waves, integers, and represent ordered categories. These can include binary variables.

{phang}{opt su:norderedvars(varlist)} specifies which variables in {varlist} are stable across waves, integers, and represent unordered categories. These can include binary variables.

{pstd} At least one of the following options is required

{phang}{opt vn:umericvars(varlist)} specifies which variables in {varlist} vary across waves, real numbers, but not categorical.

{phang}{opt vo:rderedvars(varlist)} specifies which variables in {varlist} vary across waves, integers, and represent ordered categories. These can include binary variables.

{phang}{opt vu:norderedvars(varlist)} specifies which variables in {varlist} vary across waves, integers, and represent unordered categories. These can include binary variables.

{pstd} None of the following options are required

{phang}{opt x:vars(varlist)} specifies any auxiliary variables which should be used in the interim imputations. Stable variables will use the first wave's values.  

{phang}{opt diagnosticdata(string)} specifies a path and file name stub to save data containing intermidate steps in the PanelPatch process. 

{phang}{opt minwave(integer)} specifies the minimum number of waves required for the returned imputations. Default is 3. 

{phang}{opt b:urnin(integer)} specifies the number of burn-in cycles for Stata's native {cmd: mi impute chained} procedure. Default is 10.

{phang}{opt lassofolds(integer)} specifies the number of folds to be used in Stata's {cmd: lasso} command. Default is 10.

{phang}{opt rundiag:nostic} Triggers a set of diagnostic analyses to evaluate the likely quality of the imputations.  

{marker return}{...}
{title:Return}
{hline}
{pstd}PanelPatch returns the following in {cmd :r()}



{marker examples}{...}
{title:Examples}
{hline}
{pstd}Setup

{phang2}{cmd:. sysuse auto}

{phang2}{cmd:. summarize price, detail}

{pstd}Scatter {cmd:price} against {cmd:mpg}, labelling anything above 95th 
percentile or below 5th percentile as an outlier.

{phang2}{cmd:. PanelPatch price mpg, conf(14500 3299)}

{pstd}Scatter variable {cmd:price} against {cmd:mpg}, labelling anything outside 
the range with labels angled at 90 degrees.

{phang2}{cmd:. PanelPatch price mpg, conf(14500 3299) angle(90)}

{pstd}Scatter variable {cmd:price} against {cmd:mpg}, putting variable {cmd:price} 
on the x-axis, and labelling outliers with the variable {cmd:make}.

{phang2}{cmd:. PanelPatch mpg price make, conf(14500 3299) xsplit}

{hline}


{marker dependent}{...}
{title:Dependent commands}
{hline}

{phang}
{cmd:PanelPatch}, which is programmed in the file PanelPatch.ado, utilizes several other authored commands, including {cmd: mi_impute_cmd_PanelPatch_cleanup}, {cmd: mi_impute_cmd_PanelPatch_init}, {cmd: mi_impute_cmd_PanelPatch_parse}, {cmd: mi_impute_cmd_PanelPatch}, {cmd: PanelPatch_cluster_algorithm}, {cmd: PanelPatch_cluster_checker}, {cmd: PanelPatch_cluster_collapse}, {cmd: PanelPatch_cluster_wrapper}, {cmd: PanelPatch_corr}, {cmd: PanelPatch_gamma}, {cmd: PanelPatch_mk_compvars}, {cmd: PanelPatch_poly_trend_by}, {cmd: PanelPatch_predict_wrapper}, {cmd: PanelPatch_running_response}, {cmd: PanelPatch_weight_adjust}, {cmd: PanelPatch_weight_cluster}, and {cmd: PanelPatchDiag}.

{hline}